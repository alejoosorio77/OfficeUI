/* ====================================================================================================
 * Filename:      OfficeUI.Mixins.scss
 * Author:        Kevin De Coninck
 * Date Created:  30/03/2015
 * Media:         Screen
 * ----------------------------------------------------------------------------------------------------
 * Notes:         The OfficeUI.Mixins.scss file is a file contains various mixins that can be used with
 *                the scss syntax.
======================================================================================================= */

/* ====================================================================================================
 * Mixin:         Font-Size (REM).
 *
 * Description:   REM is similar to the EM value, but instead of being relative to the parent element
 *                it's relative to the font-size set in the <HTML> tag.
 *                It has all the benefits of EM, but you don't get issues e.g. (Compounding) since REM
 *                is only relative to the HTML element. The bad part is there's no support for REM
 *                units in Microsoft Internet Explorer 8 and below. But with this mixin we can create
 *                a fallback to pixels when rem isn't supported.
 * ==================================================================================================== */

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : ();
  $rem: ();

  @each $value in $values {

    @if $value == 0 or $value == auto {
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);
      $val: parseInt($value);

      @if $unit == "px" {
        $px : append($px,  $value);
        $rem: append($rem, ($val / 10 + rem));
      }

      @if $unit == "rem" {
        $px : append($px,  ($val * 10 + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {
    #{$property}: $px;
  } @else {
    #{$property}: $px;
    #{$property}: $rem;
  }
}

/* ====================================================================================================
 * Mixin:         Breakpoints - Responsive Design.
 *
 * Description:   This mixin allows us to add responsive design in an easy way.
 * ==================================================================================================== */
@mixin breakpoint($width) {
  @media screen and (max-width: $width) { @content; }
}

/* ====================================================================================================
 * Mixin:         Debugging
 *
 * Description:   This mixin allows us to provide debugging by adding a red border to the element on
 *                which this mixin is applied.
 * ==================================================================================================== */
@mixin debug { border: 1px solid red !important; }

/* ====================================================================================================
 * Mixin:         Animation
 *
 * Description:   This mixin allows us to write animations in an easy way.
 * ==================================================================================================== */
@mixin animation($duration, $name, $delay, $repeation-mode) {
  @if ($delay == "") {
    -moz-animation-duration: $duration; -ms-animation-duration: $duration; -o-animation-duration: $duration; -webkit-animation-duration: $duration; animation-duration: $duration;
    -moz-animation-name: $name; -ms-animation-name: $name; -o-animation-name: $name; -webkit-animation-name: $name; animation-name: $name;

    @if ($repeation-mode == "NoRepeat") { -moz-animation-fill-mode: forwards; -webkit-animation-fill-mode: forwards; animation-fill-mode: forwards; }
    @if ($repeation-mode == "Infinite") { -moz-animation-iteration-count: infinite; -ms-animation-iteration-count: infinite; -o-animation-iteration-count: infinite; -webkit-animation-iteration-count: infinite; animation-iteration-count: infinite; }
  }
}

@mixin animation-delay($time) { -moz-animation-delay: $time; -ms-animation-delay: $time; -o-animation-delay: $time; -webkit-animation-delay: $time; animation-delay: $time; }
@mixin animation-direction-normal { -moz-animation-direction: normal; -ms-animation-direction: normal; -o-animation-direction: normal; -webkit-animation-direction: normal; animation-direction: normal; }
@mixin keyframes($name) { @-moz-keyframes #{$name} { @content; } @-ms-keyframes #{$name} { @content; } @-o-keyframes #{$name} { @content; } @-webkit-keyframes #{$name} { @content; } @keyframes #{$name} { @content; }}

/* ---- Useful mixins. ---- */
@mixin square-box($dimensions) { width: $dimensions; height: $dimensions; }
@mixin border-radius($radius) { -moz-border-radius: $radius; -ms-border-radius: $radius; -o-border-radius: $radius; -webkit-border-radius: $radius; border-radius: $radius; }
@mixin no-select { -moz-user-select: none; -ms-user-select: none; -webkit-touch-callout: none; -webkit-user-select: none; cursor: default; user-select: none; }

/* -- Positioning mixins. -- */
@mixin top-left-position($top, $left) { top: $top; left: $left; }

/* -- Transformation mixins. -- */
@mixin transform-scale($scale) { -moz-transform: scale($scale); -ms-transform: scale($scale); -o-transform: scale($scale); -webkit-transform: scale($scale); transform: scale($scale); }







































